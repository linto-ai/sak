FROM nvidia/cuda:11.4.2-devel-ubuntu20.04

ARG KALDI_MKL
ARG DEBIAN_FRONTEND=noninteractive
ARG TZ=Etc/UTC

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        apt-utils \
        autoconf \
        automake \
        bzip2 \
        ca-certificates \
        cmake \
        g++ \
        git \
        htop \
        ipython3 \
        less \
        libtool \
        locales \
        make \
        nano \
        pkg-config \
        python3 \
        python3-dev \
        python3-websockets \
        python3-setuptools \
        python3-pip \
        python3-wheel \
        python3-cffi \
        rsync \
        time \
        tmux \
        unzip \
        wget \
        xz-utils \
        zlib1g-dev

RUN \
    git clone -b vosk --single-branch https://github.com/alphacep/kaldi /opt/kaldi \
    && cd /opt/kaldi/tools \
    && sed -i 's:status=0:exit 0:g' extras/check_dependencies.sh \
    && sed -i 's:--enable-ngram-fsts:--enable-ngram-fsts --disable-bin:g' Makefile \
    && make -j $(nproc) openfst cub \
    && if [ "x$KALDI_MKL" != "x1" ] ; then \
          extras/install_openblas_clapack.sh; \
       else \
          extras/install_mkl.sh; \
       fi \
    \
    && cd /opt/kaldi/src \
    && if [ "x$KALDI_MKL" != "x1" ] ; then \
          ./configure --mathlib=OPENBLAS_CLAPACK --shared; \
       else \
          ./configure --mathlib=MKL --shared; \
       fi \
    && sed -i 's:-msse -msse2:-msse -msse2:g' kaldi.mk \
    && sed -i 's: -O1 : -O3 :g' kaldi.mk \
    && make -j $(nproc) online2 lm rnnlm cudafeat cudadecoder \
    \
    && git clone https://github.com/alphacep/vosk-api /opt/vosk-api \
    && cd /opt/vosk-api/src \
    && HAVE_CUDA=1 HAVE_MKL=$KALDI_MKL KALDI_ROOT=/opt/kaldi make -j $(nproc) \
    && cd /opt/vosk-api/python \
    && python3 ./setup.py install \
    \
    && git clone https://github.com/alphacep/vosk-server /opt/vosk-server \
    \
    && rm -rf /opt/vosk-api/src/*.o \
    && rm -rf /opt/kaldi \
    && rm -rf /root/.cache

# Audio specific
RUN apt-get install -y --no-install-recommends \
        sox \
        libsox-fmt-mp3 \
        libsox-dev \
        ffmpeg \
        libsndfile1

RUN python -m pip install --upgrade pip

# Python
COPY requirements.txt ./
RUN pip3 install --no-cache-dir -r requirements.txt
RUN rm requirements.txt

# Speechbrain
RUN git clone https://github.com/speechbrain/speechbrain /opt/speechbrain \
    && cd /opt/speechbrain/ \
    && pip3 install -r requirements.txt \
    && SETUPTOOLS_USE_DISTUTILS=stdlib pip3 install -e .

# Whisper
# RUN pip3 install git+https://github.com/openai/whisper.git 

# Tweaks (for the SKIPPING trick (look for 'SKIPPING' in the code), useful to restart training experiments with transformers trainer, when the jobs stopped in the middle of a huge epoch)
COPY transformers_modified/trainer.py /usr/local/lib/python3.9/site-packages/transformers/

# Fix for hyperpyyaml
RUN pip3 install git+https://github.com/speechbrain/HyperPyYAML@1e47fa63982933cd7fb01e1e6e063be492fddeab

# Clean
RUN rm -rf /var/lib/apt/lists/*

# Locale
RUN sed -i '/fr_FR.UTF-8/s/^# //g' /etc/locale.gen && locale-gen
ENV LANG fr_FR.UTF-8  
ENV LANGUAGE fr_FR:en  
ENV LC_ALL fr_FR.UTF-8

ENTRYPOINT ["/bin/bash"]